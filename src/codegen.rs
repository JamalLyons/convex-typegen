use std::io::{Seek, SeekFrom, Write};

use crate::convex::{ConvexFunction, ConvexFunctions, ConvexSchema, ConvexTable};
use crate::errors::ConvexTypeGeneratorError;

pub(crate) fn generate_code(path: &str, data: (ConvexSchema, ConvexFunctions)) -> Result<(), ConvexTypeGeneratorError>
{
    let mut file = std::fs::File::create(path)?;

    // Clear the file
    file.set_len(0)?;
    file.seek(SeekFrom::Start(0))?;

    let file_header = r#"// This file is generated by convex-typegen. Do not modify directly.
// You can find more information about convex-typegen at https://github.com/JamalLyons/convex-typegen

"#;

    file.write_all(file_header.as_bytes())?;

    // A buffer to hold the generated code
    let mut code = String::new();

    for table in data.0.tables {
        code.push_str(&generate_table_code(table));
    }

    // for function in data.1 {
    //     code.push_str(&generate_function_code(function));
    // }

    file.write_all(code.as_bytes())?;

    Ok(())
}

/// Generate the code for a table.
/// 
/// A tanle
fn generate_table_code(table: ConvexTable) -> String
{
    let mut code = String::new();

    let table_struct_name = format!("{}Table", capitalize_first_letter(&table.name));

    code.push_str(&format!("pub struct {} {{\n", table_struct_name));

    code
}

/// Generate the code for a function.
fn generate_function_code(function: ConvexFunction) -> String
{
    todo!()
}

fn capitalize_first_letter(s: &str) -> String
{
    s.chars().next().unwrap().to_uppercase().collect::<String>() + &s[1..]
}
